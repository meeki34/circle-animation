<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive 3D Skeleton Sphere</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/gsap@3.11.4/dist/gsap.min.js"></script>
    <style>
        .skeleton-circle-container {
            position: relative;
            width: 100%;
            height: 100vh;
            overflow: hidden;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        }
        
        .info-panel {
            position: absolute;
            bottom: 2rem;
            left: 50%;
            transform: translateX(-50%);
            z-index: 100;
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(10px);
            border-radius: 0.75rem;
            padding: 1.25rem 2rem;
            border: 1px solid rgba(255, 255, 255, 0.15);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
            max-width: 90%;
            transition: all 0.3s ease;
        }
        
        .info-panel:hover {
            transform: translateX(-50%) scale(1.02);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.3);
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: #0f172a;
            z-index: 1000;
            transition: opacity 0.5s ease-out;
        }
        
        .spinner {
            width: 60px;
            height: 60px;
            border: 6px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top-color: #60a5fa;
            border-bottom-color: #60a5fa;
            animation: spin 1.2s ease-in-out infinite;
            margin-bottom: 1.5rem;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .progress-text {
            font-size: 0.9rem;
            color: #93c5fd;
            margin-top: 0.5rem;
        }
        
        .controls-info {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: rgba(15, 23, 42, 0.7);
            backdrop-filter: blur(5px);
            border-radius: 0.5rem;
            padding: 0.5rem 0.75rem;
            font-size: 0.75rem;
            color: #cbd5e1;
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: none;
        }
        
        @media (min-width: 768px) {
            .controls-info {
                display: block;
            }
        }
        
        @media (max-width: 768px) {
            .info-panel {
                padding: 1rem;
                font-size: 0.875rem;
            }
            
            .spinner {
                width: 50px;
                height: 50px;
            }
        }
    </style>
</head>
<body class="bg-slate-900 text-slate-100 font-sans overflow-hidden">
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
        <p class="text-blue-400 font-medium text-lg mb-1">Loading 3D Experience</p>
        <p class="progress-text" id="progressText">Initializing...</p>
    </div>
    
    <div class="skeleton-circle-container" id="skeletonContainer">
        <div class="controls-info">
            <div>Left click + drag: Rotate</div>
            <div>Scroll: Zoom</div>
            <div>Right click + drag: Pan</div>
        </div>
        
        <div class="info-panel">
            <h2 class="text-xl font-bold text-blue-400 mb-2">Interactive Skeleton Sphere</h2>
            <p class="text-slate-300">Move your cursor to interact with the 3D model</p>
            <div class="mt-2 flex space-x-2">
                <span class="px-2 py-1 bg-blue-900/50 text-blue-300 rounded text-xs">WebGL</span>
                <span class="px-2 py-1 bg-purple-900/50 text-purple-300 rounded text-xs">Three.js</span>
                <span class="px-2 py-1 bg-emerald-900/50 text-emerald-300 rounded text-xs">Interactive</span>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Update loading progress
            const progressText = document.getElementById('progressText');
            const updateProgress = (message) => {
                progressText.textContent = message;
            };
            
            updateProgress('Setting up scene...');
            
            // Initialize Three.js scene
            const container = document.getElementById('skeletonContainer');
            const width = container.clientWidth;
            const height = container.clientHeight;
            
            // Scene setup with fog for depth
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0x0f172a);
            scene.fog = new THREE.FogExp2(0x0f172a, 0.1);
            
            updateProgress('Configuring camera...');
            
            // Camera setup with smoother movement
            const camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 1000);
            camera.position.z = 3.5;
            camera.position.y = 0.5;
            
            // Renderer setup with improved antialiasing
            const renderer = new THREE.WebGLRenderer({ 
                antialias: true,
                powerPreference: "high-performance"
            });
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            renderer.setSize(width, height);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            renderer.toneMapping = THREE.ACESFilmicToneMapping;
            renderer.toneMappingExposure = 1.2;
            container.appendChild(renderer.domElement);
            
            updateProgress('Adding lighting...');
            
            // Improved lighting setup
            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
            scene.add(ambientLight);
            
            // Main directional light with shadows
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(1, 1.5, 1);
            directionalLight.castShadow = true;
            directionalLight.shadow.mapSize.width = 1024;
            directionalLight.shadow.mapSize.height = 1024;
            scene.add(directionalLight);
            
            // Fill light
            const fillLight = new THREE.DirectionalLight(0x6699ff, 0.3);
            fillLight.position.set(-1, -0.5, -1);
            scene.add(fillLight);
            
            // Back light for rim effect
            const backLight = new THREE.DirectionalLight(0x4466cc, 0.4);
            backLight.position.set(0.5, -0.5, -1);
            scene.add(backLight);
            
            updateProgress('Creating 3D model...');
            
            // Create skeleton-like sphere with improved geometry
            const createSkeletonSphere = () => {
                // Main sphere geometry with more segments for smoother appearance
                const geometry = new THREE.SphereGeometry(1, 64, 64);
                
                // Wireframe material with emissive effect
                const wireMaterial = new THREE.MeshPhongMaterial({
                    color: 0x60a5fa,
                    emissive: 0x1e3a8a,
                    emissiveIntensity: 0.2,
                    wireframe: true,
                    transparent: true,
                    opacity: 0.85,
                    shininess: 100,
                    specular: 0xffffff
                });
                
                // Create the main wireframe sphere
                const wireSphere = new THREE.Mesh(geometry, wireMaterial);
                wireSphere.castShadow = true;
                
                // Add skeletal "bones" - lines protruding from the sphere
                const bones = new THREE.Group();
                const boneCount = 36; // Increased bone count
                const boneLength = 0.6;
                const boneThickness = 0.03;
                
                // Create a shared geometry for better performance
                const boneGeometry = new THREE.CylinderGeometry(
                    boneThickness, 
                    boneThickness * 0.4, 
                    boneLength, 
                    8, 
                    1, 
                    true
                );
                
                for (let i = 0; i < boneCount; i++) {
                    // Fibonacci sphere distribution for even spacing
                    const y = 1 - (i / (boneCount - 1)) * 2;
                    const radius = Math.sqrt(1 - y * y);
                    
                    const theta = Math.PI * (3 - Math.sqrt(5)) * i;
                    const x = Math.cos(theta) * radius;
                    const z = Math.sin(theta) * radius;
                    
                    // Create bone material with slight variation
                    const hue = 0.6 + (i % 3) * 0.05;
                    const boneMaterial = new THREE.MeshPhongMaterial({
                        color: new THREE.Color().setHSL(hue, 0.7, 0.7),
                        emissive: new THREE.Color().setHSL(hue, 0.5, 0.2),
                        emissiveIntensity: 0.3,
                        shininess: 50,
                        transparent: true,
                        opacity: 0.95
                    });
                    
                    const bone = new THREE.Mesh(boneGeometry, boneMaterial);
                    bone.castShadow = true;
                    
                    // Position and orient the bone
                    bone.position.set(x * 1.05, y * 1.05, z * 1.05);
                    bone.lookAt(new THREE.Vector3(0, 0, 0));
                    bone.rotation.x += Math.PI / 2;
                    
                    // Store original position and create random offset for animation
                    const animationOffset = Math.random() * Math.PI * 2;
                    const animationSpeed = 0.5 + Math.random() * 0.5;
                    
                    bone.userData = {
                        originalPosition: new THREE.Vector3(x * 1.05, y * 1.05, z * 1.05),
                        targetPosition: new THREE.Vector3(x * 1.8, y * 1.8, z * 1.8),
                        animationOffset,
                        animationSpeed
                    };
                    
                    bones.add(bone);
                }
                
                // Create a group to hold both the sphere and bones
                const skeletonGroup = new THREE.Group();
                skeletonGroup.add(wireSphere);
                skeletonGroup.add(bones);
                
                // Add subtle pulsing animation to the entire group
                skeletonGroup.userData = {
                    baseScale: 1,
                    pulseSpeed: 0.5
                };
                
                return { skeletonGroup, bones: bones.children };
            };
            
            updateProgress('Finalizing model...');
            
            // Create our skeleton sphere
            const { skeletonGroup, bones } = createSkeletonSphere();
            scene.add(skeletonGroup);
            
            // Add orbit controls with improved parameters
            const controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableZoom = true;
            controls.enablePan = true;
            controls.enableDamping = true;
            controls.dampingFactor = 0.1;
            controls.rotateSpeed = 0.5;
            controls.zoomSpeed = 0.8;
            controls.minDistance = 2;
            controls.maxDistance = 8;
            controls.maxPolarAngle = Math.PI * 0.9;
            
            // Mouse interaction variables
            let mouseX = 0;
            let mouseY = 0;
            let targetRotationX = 0;
            let targetRotationY = 0;
            let isHovering = false;
            let hoverProgress = 0;
            let time = 0;
            
            // Handle mouse movement with throttling
            const handleMouseMove = (event) => {
                mouseX = (event.clientX / width) * 2 - 1;
                mouseY = -(event.clientY / height) * 2 + 1;
                
                targetRotationX = mouseY * 0.3;
                targetRotationY = mouseX * 0.3;
                
                isHovering = true;
            };
            
            container.addEventListener('mousemove', handleMouseMove);
            container.addEventListener('mouseleave', () => {
                isHovering = false;
            });
            
            // Touch support for mobile devices
            const handleTouchMove = (event) => {
                if (event.touches.length === 1) {
                    mouseX = (event.touches[0].clientX / width) * 2 - 1;
                    mouseY = -(event.touches[0].clientY / height) * 2 + 1;
                    
                    targetRotationX = mouseY * 0.3;
                    targetRotationY = mouseX * 0.3;
                    
                    isHovering = true;
                }
            };
            
            container.addEventListener('touchmove', handleTouchMove);
            container.addEventListener('touchend', () => {
                isHovering = false;
            });
            
            // Animation loop with improved performance
            const clock = new THREE.Clock();
            const animate = () => {
                requestAnimationFrame(animate);
                
                const delta = clock.getDelta();
                time += delta;
                
                // Update hover progress with easing
                hoverProgress = GSAP.utils.interpolate(
                    hoverProgress, 
                    isHovering ? 1 : 0, 
                    isHovering ? 0.1 : 0.05
                );
                
                // Apply smooth rotation based on mouse position
                skeletonGroup.rotation.x += (targetRotationX - skeletonGroup.rotation.x) * 0.05;
                skeletonGroup.rotation.y += (targetRotationY - skeletonGroup.rotation.y) * 0.05;
                
                // Add subtle automatic rotation when not interacting
                if (!isHovering && hoverProgress < 0.1) {
                    skeletonGroup.rotation.y += 0.002;
                }
                
                // Animate bones with individual variations
                bones.forEach(bone => {
                    const { originalPosition, targetPosition, animationOffset, animationSpeed } = bone.userData;
                    
                    // Add subtle independent movement
                    const waveFactor = Math.sin(time * animationSpeed + animationOffset) * 0.1;
                    
                    // Interpolate position with easing
                    bone.position.x = originalPosition.x + (targetPosition.x - originalPosition.x) * hoverProgress;
                    bone.position.y = originalPosition.y + (targetPosition.y - originalPosition.y) * hoverProgress;
                    bone.position.z = originalPosition.z + (targetPosition.z - originalPosition.z) * hoverProgress;
                    
                    // Add wave effect to the position
                    bone.position.x += waveFactor * (1 - hoverProgress);
                    bone.position.z += waveFactor * (1 - hoverProgress * 0.5);
                    
                    // Scale and rotate bones based on hover state
                    const scale = 1 + hoverProgress * 0.4;
                    bone.scale.set(scale, scale, scale);
                    
                    // Slight rotation animation
                    bone.rotation.z = hoverProgress * Math.PI * 0.1 * (Math.sin(time * 2 + animationOffset) * 0.2 + 1);
                });
                
                // Add subtle pulsing to the entire sphere
                const pulseFactor = Math.sin(time * skeletonGroup.userData.pulseSpeed) * 0.03 + 1;
                skeletonGroup.scale.set(
                    pulseFactor,
                    pulseFactor,
                    pulseFactor
                );
                
                // Update controls
                controls.update();
                
                // Render scene
                renderer.render(scene, camera);
            };
            
            // Handle window resize with debouncing
            let resizeTimeout;
            const handleResize = () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    const newWidth = container.clientWidth;
                    const newHeight = container.clientHeight;
                    
                    camera.aspect = newWidth / newHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(newWidth, newHeight);
                }, 100);
            };
            
            window.addEventListener('resize', handleResize);
            
            // Start animation
            animate();
            
            // Hide loading overlay with GSAP for smoother transition
            updateProgress('Almost ready...');
            
            setTimeout(() => {
                gsap.to("#loadingOverlay", {
                    opacity: 0,
                    duration: 0.8,
                    ease: "power2.out",
                    onComplete: () => {
                        document.getElementById('loadingOverlay').style.display = 'none';
                    }
                });
            }, 2000);
            
            // Add click effect
            container.addEventListener('click', () => {
                // Create a quick pulse effect on click
                gsap.to(skeletonGroup.scale, {
                    x: 1.1,
                    y: 1.1,
                    z: 1.1,
                    duration: 0.3,
                    yoyo: true,
                    repeat: 1,
                    ease: "power2.inOut"
                });
            });
        });
    </script>
</body>
</html>
